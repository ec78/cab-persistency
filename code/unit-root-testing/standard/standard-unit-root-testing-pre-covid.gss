new;
library tspdlib, tsmt;
#include code/cab_util.src

// Data loading path
// Data file
fname = "reg_data.gdat";

// Results saving paths
spath = "results/unit-root-tests/standard/";
spath2 = "results/unit-root-tests/with-breaks/";

/*
** Perform import
*/
data = loadd("data/reg_data.gdat");
data = asdate(move(data), "%YQ%q", "date3");

// Filter data
pre_data = selif(data, data[., "date2"] .< "2020-03");

// Get unique country codes
ccodes = unique(pre_data[., "cn"]);

// Get column labels
{ cnames, keys } = getColLabels(pre_data, "Country");
N = rows(cnames);

// Turn saving on
save_on = 1;

// Get start and end data
tmp_data = packr(pre_data);


// Get start and end dates
start_date = asDF(aggregate(packr(tmp_data[., "date3" "Country"]), "min", "Country"), "Country", "Start Date");
end_date = asDF(aggregate(packr(tmp_data[., "date3" "Country"]), "max", "Country"), "Country", "End Date");

/*
** Storage Matrices
*/
N_obs = zeros(N, 1);
tstat_adf = zeros(N,1);
LM_kpss = tstat_adf;
Zt_pp = tstat_adf;
Za_pp = Zt_pp;
tstat_LM = tstat_adf;
tau_gls = tstat_adf;

lags_adf = zeros(N,1);
lags_LM = lags_adf;
lags_gls = lags_adf;

cv_adf = zeros(N, 3);
cv_kpss = cv_adf;
cvZt_pp = cv_adf;
cvZa_pp = cv_adf;
cv_lm = cv_adf;
cv_gls = cv_adf;

reject_adf = zeros(N, 1);
reject_gls = reject_adf;
reject_kpss = reject_adf;
reject_LM = reject_adf;
reject_Zt_PP = reject_adf;
reject_Za_PP = reject_adf;

screen off;

// Perform standard tests
model = 1;
for i(1, N, 1);

    // Select data for country
    e = pre_data[., "Country"] .== cnames[i];
    tmp_data = selif(pre_data[., "pct_ca_reg"], e);
    y_test = packr(tmp_data[., "pct_ca_reg"]);
    N_obs[i] = rows(y_test);
    
    // ADF testing
    { tstat_adf[i], lags_adf[i], cv_adf[i, .] } = ADF(y_test, 1);
    reject_adf[i] = checkRejection(tstat_adf[i], cv_adf[i, .], 0);
    
    // DFGLS testing
    { tau_GLS[i], lags_gls[i], cv_GLS[i, .] }   = DFGLS(y_test, 1);
    reject_gls[i] = checkRejection(tau_GLS[i], cv_GLS[i, .], 0);
    
    // KPSS testing
    { LM_kpss[i], cv_tmp } = LMkpss(y_test, 1);
    cv_kpss[i, .] = cv_tmp';
    reject_kpss[i] = checkRejection(LM_kpss[i], cv_kpss[i, .], 1);
    
    //PP testing
    { Zt_pp[i], Za_pp[i], cvZt_pp[i, .], cvZa_pp[i, .]} = PP(y_test, 1);
    reject_Zt_pp[i] = checkRejection(Zt_pp[i], cvZt_pp[i, .], 0);
    reject_Za_pp[i] = checkRejection(Za_pp[i], cvZa_pp[i, .], 0);
    
    //LM testing
    { tstat_LM[i], lags_LM[i], cv_LM[i, .] } = LM(y_test);
    reject_LM[i] = checkRejection(tstat_LM[i], cv_LM[i, .], 0);

endfor;
screen on;

// Add asterisks
// Add asterisks
str_stats_adf = addAsterisks(tstat_adf, reject_adf);
str_stats_gls = addAsterisks(tau_gls, reject_gls);
str_stats_kpss = addAsterisks(LM_kpss, reject_kpss);
str_stats_Zt = addAsterisks(Zt_pp, reject_Zt_pp);
str_stats_Za = addAsterisks(Za_pp, reject_Za_pp);
str_stats_LM = addAsterisks(tstat_LM, reject_LM);

// Print the UR table
table_name = spath $+ "appendix3-pre-covid-unit-root.txt";
output file=^table_name on;
fmt = "%15s";
s = "Country"$~"ADF"$~"DFGLS"$~"ZT_PP"$~"Za_PP"$~"LM"$~"KPSS"$~"N"$~"Start Date"$~"End Date";
sprintf(fmt, s);
fmt2 = "%15s%15s%15s";
s2 = cnames$~str_stats_adf$~str_stats_gls$~str_stats_Zt$~str_stats_Za$~str_stats_LM$~str_stats_kpss$~itos(N_obs);
sprintf(fmt2, s2, start_date[., 2], end_date[., 2]); 
output off;

// Reclassify rejection vectors for all tests
{ reject_adf,  reject_adf_cts } = countsRejectionsRates(reject_adf, "ADF Conclusion");
{ reject_gls,  reject_gls_cts } = countsRejectionsRates(reject_gls, "DFGLS Conclusion");
{ reject_kpss,  reject_kpss_cts } = countsRejectionsRates(reject_kpss, "KPSS Conclusion");
{ reject_Zt_pp,  reject_Zt_pp_cts } = countsRejectionsRates(reject_Zt_pp, "ZT PP Conclusion");
{ reject_Za_pp,  reject_Za_pp_cts } = countsRejectionsRates(reject_Za_pp, "Za PP Conclusion");
{ reject_LM,  reject_LM_cts } = countsRejectionsRates(reject_LM, "LM Conclusion");
 
// Plot results
struct plotControl ctl;
ctl = plotGetDefaults("bar");

plotLayout(3, 2, 1);
plotSetTitle(&ctl, "ADF Test Results (%)");
plotFreq(ctl, reject_adf, 1);

plotLayout(3, 2, 2);
plotSetTitle(&ctl, "DFGLS Test Results (%)");
plotFreq(ctl, reject_gls, 1);

plotLayout(3, 2, 3);
plotSetTitle(&ctl, "PP Z_a Test Results (%)");
plotFreq(ctl, reject_Za_PP, 1);

plotLayout(3, 2, 4);
plotSetTitle(&ctl, "PP Z_t Test Results (%)");
plotFreq(ctl, reject_ZT_PP, 1);

plotLayout(3, 2, 5);
plotSetTitle(&ctl, "LM Test Results (%)");
plotFreq(ctl, reject_LM, 1);

if save_on;
    plotSave(spath $+ "pre-covid-unit-root-results.png", 11 | 8.5, "in");
endif;

struct plotControl ctl2;
ctl2 = plotGetDefaults("bar");

plotOpenWindow();
plotClearLayout();
plotSetTitle(&ctl, "KPSS Test Results (%)");
plotFreq(ctl, reject_kpss, 1);

if save_on;
    plotSave(spath $+ "pre-covid-stationarity-tests.png", 11 | 8.5, "in");
endif;
