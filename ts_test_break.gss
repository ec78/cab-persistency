new;
cls;
library tspdlib, tsmt;

@ Perform import @

main_path=__FILE_DIR;
clean_data= main_path $+ "/clean-data/";
result_path= main_path $+ "/results/";

data = loadd(clean_data $+ "Final entry dataset - adjusted - GAUSS.dta", ". - date2");
date_vector = loadd(clean_data $+ "date_vector.csv", "date($date2, '%Yq%q')");

country = getHeaders(clean_data $+ "Final entry dataset - adjusted - GAUSS.dta");
data = data ~ date_vector;
//string country= {"ABW" "AFG" "ALB" "ARG" "ARM" "AUS" "AUT" "AZE" "BEL" "BGD" "BGR" "BHS" "BIH" "BLR" "BLZ" "BMU" "BOL" "BRA" "BTN" "CAN" "CHE" "CHL" "CHN" "COL" "CPV" "CRI" "CYP" "CZE" "DEU" "DNK" "ECU" "EMU" "ESP" "EST" "ETH" "FIN" "FJI" "FRA" "GBR" "GEO" "GMB" "GRC" "GTM" "HKG" "HND" "HRV" "HTI" "HUN" "IDN" "IND" "IRL" "ISL" "ISR" "ITA" "JOR" "JPN" "KAZ" "KGZ" "KHM" "KOR" "LAO" "LBN" "LKA" "LSO" "LTU" "LUX" "LVA" "MAR" "MDA" "MDG" "MEX" "MKD" "MLT" "MMR" "MNE" "MNG" "MOZ" "MUS" "MYS" "NIC" "NLD" "NOR" "NPL" "NZL" "PAK" "PAN" "PER" "PHL" "PNG" "POL" "PRT" "PRY" "ROU" "RUS" "SAU" "SDN" "SGP" "SLB" "SLV" "SRB" "SUR" "SVK" "SVN" "SWE" "SYC" "THA" "TJK" "TON" "TUR" "TWA" "UGA" "UKR" "URY" "USA" "VEN" "VNM" "VUT" "WSM" "XKX" "YEM" "ZAF" "ZMB"};
//string country= {"ABW" "AFG"};

"/=============================================================";
"///                                                        ///";
"///       UNIVARIATE UNIT ROOT TESTS - with breaks         ///";
"///                                                        ///";
"=============================================================/";

string ts_testresult={"Country" "ADF stat" "starADF" "KPSS stat" "star KPSS" "PP Zt stat" "star PP Zt" "PP Za stat" "star PP Za"};
print ts_testresult;
for i(1, rows(country), 1);

    "/=============================================================";
    "   COUNTRY: " country[i];
    "=============================================================/";
    
    
    "   *   Break(s) in level and trend";
    y = packr(data[.,country[i] "date2"]);
    pmax = 12;  // Change maximum lags

    model = 2;    // break in level and trend
    // Zivot-Andrew
    { ADF_min, tb1, p, cv } = ADF_1break(y, model, pmax);
    // Flexible Fourier ADF
    { ADFstat, f, p, cv } = Fourier_ADF(y, model, pmax);
    // Flexible Fourier KPSS
    { KPSS, k, cv } = Fourier_KPSS(y, model);
    // Fourier GLS
    { GLSstat, f, p, cv } = Fourier_GLS(y, model, pmax);
    // Fourier LM
    print i;
    print country[19];
    print packr(data[.,country[19] "date2"]);
    y = packr(data[.,country[i]]);
    { LMstat, f, p, cv} = Fourier_LM(y, pmax);
    
    
//    { ADFtau, ADFp, cvADF } = ADF(y, model, pmax, ic);
//        statADF=ADFtau;
//        if statADF < cvADF[1,1];
//            starADF = "***";
//        elseif statADF < cvADF[1,2];
//            starADF = "**";
//        elseif statADF < cvADF[1,3];
//            starADF = "*";
//        else;
//            starADF = "";
//        endif;
//    {kpss, cv} = LMkpss(y, model);
//        statKPSS=kpss;
//        if statkpss > cv[3,1];
//            starKPSS = "***";
//        elseif statkpss > cv[2,1];
//            starKPSS = "**";
//        elseif statkpss > cv[1,1];
//            starKPSS = "*";
//        else;
//            starKPSS = "";
//        endif;
//    { Zt, Za, cvZt, cvZa } = PP(y, model);
//        statPP_Zt=Zt;
//        if statPP_Zt < cvZt[1,1];
//            starPP_Zt = "***";
//        elseif statPP_Zt < cvZt[1,2];
//            starPP_Zt = "**";
//        elseif statPP_Zt < cvZt[1,3];
//            starPP_Zt = "*";
//        else;
//            starPP_Zt = "";
//        endif;
        
//        statPP_Za=Za;
//        if statPP_Za < cvZa[1,1];
//            starPP_Za = "***";
//        elseif statPP_Za < cvZa[1,2];
//            starPP_Za = "**";
//        elseif statPP_Za < cvZa[1,3];
//            starPP_Za = "*";
//        else;
//            starPP_Za = "";
//        endif;
//   ts_testresult=ts_testresult$|(country[i] $~ ntos(statADF) $~ starADF $~ ntos(statKPSS) $~ starKPSS $~ntos(statPP_Zt) $~starPP_Zt$~ntos(statPP_Za)$~starPP_Za);

    endfor;
@ Open output file @
//out1=main_path $+"time series unit root tests - no break.out";

//output file =  ^out1 reset;
//format /rd 8,3; // format output file: right justified, field width is 8 places, print 3 decimal digits

//print ts_testresult;
    
//output off;
