new;
library tspdlib, tsmt;

// Data loading path
fpath = "data/";

// Data file
fname = "reg_data.gdat";

// Results saving paths
save_on = 1;
spath = "results/data_plots/reg_data/data_summaries/";
sfile = "fig3-cab-persistence.png";
sfile2 = "fig4-cab-persistence2.png";
/*
** Perform import
*/
data = loadd(fpath$+fname);
data = asdate(move(data), "%YQ%q", "date3");

// Filter data to include observations after 1960
data = delif(data, data[., "date3"] .<"1960-01-01");

// Get column labels
{ cnames, keys } = getColLabels(data, "Country");
N = rows(cnames);

// Turn saving on
save_on = 0;

// Get maximum time length
tmp_data = packr(data);
maxT = rows(unique(tmp_data[., "date3"]));

/*
** Storage Matrices
*/
orders = N|maxT|2;
_beta = arrayinit(orders, 0);
rho = zeros(maxT, N);

//rho_vec = {};

// Set up rolling regression
wind = 20;
gr = 1;
add = 0;
//rho_vec = {};

for i(1, N, 1);

    // Select data for country
    e = data[., "Country"] .== cnames[i];
    tmp_data = packr(selif(data[., "Country" "date3" "pct_ca_reg"], e));
    
    // Get y_test
    dt_ctry = tmp_data[., "Country" "date3"];
    yt = tmp_data[., "pct_ca_reg"];

    // Run rolling AR(1) test
    _beta[i, 1:rows(yt), .] = rollingArimaFit(yt, wind);
    
     // Get rho 
     tmp_rho = packr(miss(arraytomat(_beta[i, ., 1]), 0));
     tmp_rho = dt_ctry[1+wind:rows(dt_ctry), .]~asDF(packr(miss(arraytomat(_beta[i, ., 1]), 0)), "rho");
     
     // Join with original data
     if i==1;
         rho_vec = tmp_rho;
     else;
         rho_vec = rho_vec|tmp_rho;
     endif;
endfor;


/*
** Perform CSA 
*/
// Mean CAB by year 
// Take absolute value of CAB
cssd_cab =  aggregate(data[., "pct_ca_reg" "date3"], "sd", "date3");
data[., "pct_ca_reg"] = abs(data[., "pct_ca_reg"]);
csa_cab = aggregate(data[., "pct_ca_reg" "date3"], "mean", "date3");

// Mean rho by year
csa_rho = aggregate(rho_vec[., "rho" "date3"], "mean", "date3");
cssd_rho = aggregate(rho_vec[., "rho" "date3"], "sd", "date3");

// Get plot data
plt_data = innerJoin(csa_cab, "date3", cssd_cab, "date3");
plt_data2 = innerJoin(csa_rho, "date3", cssd_rho, "date3");

/*
** Set up format for data plots
*/
// Plot control struct
struct plotControl ctl;
ctl = plotGetDefaults("xy");

// Set the first curve, left y-axis
// Set the second curve right y-axis
string which = { "left", "right" };
plotSetWhichYAxis(&ctl, which);

// Set the left y-axis range to between 0 and 10,
// and the right y-axis to between 0 and 100
plotSetYRange(&ctl, 0|0, 10|12);
plotSetXRange(&ctl, "1965", "2023");

// Set up axis label size
plotSetActiveY(&ctl, "both");
// Set axes tick labels 
plotSetTicLabelFont(&ctl, "Verdana", 8);

plotSetActiveY(&ctl, "left");
plotSetYGrid(&ctl, "on");

// Set up the line style
plotSetLinePen(&ctl, 2, "black", 1|2);

// Set up legend
label = "Absolute Mean Current Account (%GDP)"$|"Within period standard deviation of CAB";
plotSetLegend(&ctl, label, "bottom center outside", 0);


plotSetYLabel(&ctl, "Current Account (% GDP)"$|"Standard Deviation (% GDP)", "Verdana", 16);
plotXY(ctl, plt_data[., "date3"], plt_data[., "pct_ca_reg" "pct_ca_reg_2"]);
if save_on;
    plotSave(spath $+ sfile, 11|8.5, "in");
endif;

// Set up legend
label = "Mean AR(1) estimates"$|"Within period standard deviation of AR(1) estimates";
plotSetLegend(&ctl, label, "bottom center outside", 0);

plotSetYRange(&ctl, 0|0, 1|0.75);
plotSetYLabel(&ctl, "AR(1) Coefficient"$|"Cross section Standard Deviation", "Arial", 16);
plotOpenWindow();
plotXY(ctl, plt_data2[., "date3"], plt_data2[., "rho" "rho_2"]);

proc (1) = rollingARIMAFit(yt, wind, ...);
    local beta_, res, T, fnl_T;
    
    // Setup Estimation Parameters
    T = rows(yt);
    fnl_T = T-wind;
    
    // Storage Matrices
    beta_=zeros(T, 2);
    res = zeros(T, 1);

    for i(1, fnl_T, 1);
        struct arimamtOut amo;
        amo = arimaFit(yt[i:(wind-1)+i], 1);
        beta_[i, .] = amo.b';
    endfor;
   
    retp(beta_);
endp;
