new;
cls;

#include code/cab_util.src

// Data loading path
fpath = "data/";
fpath_probs = "code/unit-root-testing/switching/switching_jason/";

// Coefficient estimates
fname_results = "ms-estimates.csv";
fname_cab = "reg_data.gdat";
fname_probs = "probs.fmt";

// Results saving paths
spath = "data/";

/*********************************************
** Create dummy variables for regimes
**********************************************/
// Results data
results_data = loadd(fpath$+fname_results);

// CAB data
cab_data = loadd(fpath$+fname_cab);
cab_data = asdate(move(cab_data), "%YQ%q", "date3");

// Probabilities
filestr = fpath_probs $+ fname_probs;
loadarray probs = ^filestr;

// Get unique country codes
ccodes = unique(cab_data[., "cn"]);

// Get column labels
{ cnames, keys } = getColLabels(cab_data, "Country");
N_groups = rows(cnames);

// Column labels from results
resCols = getColNames(results_data);
hypothesis_cols = startsWith(resCols, "reject");
resCols = selif(resCols, hypothesis_cols);
hypothesis = results_data[., resCols];

// Recode category data
r1_cat = zeros(rows(hypothesis), 1);
r0_cat = where(hypothesis[., 1], 1, 2) + where(hypothesis[., 2], 1, 0);
r1_cat = where(hypothesis[., 3], 1, 2) + where(hypothesis[., 4], 1, 0);

// Storage array for regimes
regimes = {};

for i(1, N_groups, 1);
    
    // Load CAB data
    //  CAB
    //  Dates
    //  Country name
    yt = __get_test_y_w_country(cab_data, cnames[i]);
    
    // Trim column with CAB and keep
    // country and dates
    yt = delcols(yt, "pct_ca_reg");
    
    // Get probabilities from array
    // and collapse into matrix
    prob_i = getMatrix(probs, i);
    
    // Get column 4 from probability which
    // is probability for S3 for phi 
    prob_i = prob_i[., 4];
    
    // Trim to match time span of yt data
    // must be done because of different data ranges
    prob_i = trimr(prob_i, 0, rows(prob_i)-rows(yt));
    
    /*
    ** Create annual regime indicator
    */
    // Create 0/1 indicator quarterly of phi regime based on S_3 
    //     0            Regime 0
    //     1            Regime 1
    // also add year of date variable for aggregation
    regime_i = yt[., "Country" "cn" "ccode"]~dtYear(yt[., "date2"])~(prob_i .> 0.5);
    
    // Aggregate to find mean regime
    regime_i = aggregate(regime_i, "mean", 4);
    
    // Recode annual regime indicator to be 1 
    // if 2 or more quarters in regime 1
    //          0         Less than 2 quarters in regime 1
    //          1         2 or more quarters in regime 1
    regime_i[., 5] = where(regime_i[., 5].>=0.5, 1, 0);
    
    // Use unit root test results to categorize regimes
    //        1              Stationary
    //        2              Unit root  
    //        3              Explosive  
    regime_type = asDF(regime_i[., 5]*r1_cat[i , 1] + (1 - regime_i[., 5])*r0_cat[i , 1], "Regime Type");
    
    // Store regimes 
    if i == 1;
        regimes = regime_i~regime_type;
    else;
        regimes = dfAppend(regimes, regime_i~regime_type);
    endif;
    
endfor;

// Set up dataframe
regimes = setColNames(regimes, "Year"$|"Regime", 1|5);

// Change column types
regimes = dftype(move(regimes), META_TYPE_CATEGORY, "Country");
regimes = dftype(move(regimes), META_TYPE_CATEGORY, "Regime");
regimes = dftype(move(regimes), META_TYPE_CATEGORY, "Regime Type");

// Reclassify regime type for clarity
regimes = setcollabels(move(regimes), "Stationary"$|"Unit root"$|"Explosive", seqa(0, 1, 3), "Regime Type");

// Save data
saved(regimes, spath $+ "regimes_summary.gdat");
