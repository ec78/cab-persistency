/*
** Load individual files
*/


// Specify data directory
data_dir = "C:/Users/eclow/Documents/GitHub/cab-persistency/updated_2025/data";
save_dir = "C:/Users/eclow/Documents/GitHub/cab-persistency/updated_2025/results/data-summaries";
save_dir_data = "C:/Users/eclow/Documents/GitHub/cab-persistency/updated_2025/clean-data";

/****************CN Data*****************/
cn_list = loadd(data_dir $+ "/cnlist_complete.xls");

// Convert country to lower because of mixed case
cn_list[., "country_name"] = lower(cn_list[., "country_name"]);

/********* OECD Data *************/
/*
** OECD DSD_BOP@DF_BOP
** Measure: CA
** Accounting Entry: B
** FS_ENTRY: Y
** FREQ: Q
** COMBINED UNIT MEASURE: PT_B1GQ, Y
*/
// OECD filename:
fname_oecd = "/oecd_raw_pct_cab_sa.csv";

// Load new OECD data
oecd_raw = loadd(data_dir $+ fname_oecd);

// Convert date column to proper type
oecd_raw[., "Date"] = asdate(oecd_raw[., "Date"], "%Y-Q%q");

// Merge with cn data
oecd_raw = outerjoin(oecd_raw, "ccode", cn_list, "ccode");

// Convert country to lower because of mixed case
oecd_raw = oecd_raw[., "ccode" "Date" "pct_ca_oecd" "country_name" "cn"];

// Drop unused categories
oecd_raw = dropunusedCategories(oecd_raw, "country_name");
oecd_raw = dropunusedCategories(oecd_raw, "ccode");

/*
** Check frequencies
*/
print "********************** OECD CAB FREQUENCIES******************/";
frequency(oecd_raw, "country_name");

/******** Eurostat data, seasonally adjusted ************/
fname_eurostat = "/eurostat_sa.csv";

// Load eurostat data
eurostat_raw = loadd(data_dir $+ fname_eurostat);

// Drop missing CAB values
eurostat_raw = selif(eurostat_raw, eurostat_raw[., "CAB"] .!= error(0));

// Convert country to lower because of mixed case
eurostat_raw[., "Country"] = lower(eurostat_raw[., "Country"]);

// Clean up names for merging
eurostat_raw[., "Country"] = strreplace(eurostat_raw[., "Country"], "bosnia_and_herzegovina", "bosnia and herzegovina");
eurostat_raw[., "Country"] = strreplace(eurostat_raw[., "Country"], "czechia", "czech republic");
eurostat_raw[., "Country"] = strreplace(eurostat_raw[., "Country"], "north_macedonia", "macedonia, fyr");
eurostat_raw[., "Country"] = strreplace(eurostat_raw[., "Country"], "slovakia", "slovak republic");
eurostat_raw[., "Country"] = strreplace(eurostat_raw[., "Country"], "turkiye", "turkey");
eurostat_raw[., "Country"] = strreplace(eurostat_raw[., "Country"], "united_kingdom", "united kingdom");

// Merge with cn data
eurostat_raw = outerjoin(eurostat_raw, "Country", cn_list, "country_name");

// Add missing country code for Kosovo
eurostat_raw[., "cn"] = where(eurostat_raw[., "Country"] .== "kosovo", 898, eurostat_raw[., "cn"]);


// Rename CAB variable
eurostat_raw = dfname(move(eurostat_raw), "pct_ca_eurostat", "CAB");

// Convert date format
eurostat_raw = asdate(move(eurostat_raw), "%Y-Q%q", "Date");

// Convert type of ccode
eurostat_raw = dftype(move(eurostat_raw), META_TYPE_CATEGORY, "ccode");

// Sort data
eurostat_raw = sortmc(eurostat_raw, "ccode"$|"Date");

// Drop unused categories
eurostat_raw = dropunusedCategories(eurostat_raw, "Country");
eurostat_raw = dropunusedCategories(eurostat_raw, "ccode");

/*
** Check frequencies
*/
print "********************** EUROSTAT FREQUENCIES******************/";
frequency(eurostat_raw, "Country");
  
/******************Computed CAB ***************
** See construct-imf-pct-cab.gss 
***********************************************/
fname_computed = "/cab_computed_sa.xlsx";
cab_computed_sa = loadd(data_dir $+ fname_computed);

// Rename columns
cab_computed_sa = dfname(move(cab_computed_sa), "Date"$|"Country"$|"computed_pct_cab_sa", "X1"$|"X2"$|"X3");

// Change country names to lowercase
cab_computed_sa[. , "Country"] = lower(cab_computed_sa[. , "Country"]);

// Update the date format
cab_computed_sa = asdate(move(cab_computed_sa), "%Y-Q%q", "Date");

// Merge with cn_list
cab_computed_sa = outerJoin(cab_computed_sa, "Country", cn_list, "country_name");

// Convert type of ccode
cab_computed_sa  = dftype(move(cab_computed_sa ), META_TYPE_CATEGORY, "ccode");

// Sort data
cab_computed_sa  = packr(sortmc(cab_computed_sa , "ccode"$|"Date"));

// Drop unused categories
cab_computed_sa = dropunusedCategories(cab_computed_sa, "Country");
cab_computed_sa = dropunusedCategories(cab_computed_sa, "ccode");

/*
** Check frequencies
*/
print "********************** COMPUTED CAB FREQUENCIES******************/";
frequency(cab_computed_sa, "Country");

/******** Previous data ************/
// Filename
fname_cis = "/cis_quarterly_data_04_04_2023_JS.xlsx";
cis_quarterly_data = loadd(data_dir $+ fname_cis, ". + pass(ca)");
cis_quarterly_data = cis_quarterly_data[., "cn" "ccode" "date2" "pct_ca" "pct_ca_sa_2" "date3" "cab" "ca"];

cis_quarterly_data = delif(cis_quarterly_data, cis_quarterly_data[., "cab"] .== miss());
cis_quarterly_data = asdate(move(cis_quarterly_data), "%Y-Q%q", "date2");

// Drop unused categories
cis_quarterly_data = dropunusedCategories(cis_quarterly_data, "ccode");

/*
** Check frequencies
*/
print "********************** ORIGINAL CAB FREQUENCIES******************/";
frequency(cis_quarterly_data, "ccode");

// Merge OECD and Original data on ccode
df_cab = outerjoin(oecd_raw[., "cn" "Date" "pct_ca_oecd"], "cn"$|"Date", cis_quarterly_data[., "cn" "date2" "pct_ca" "pct_ca_sa_2" "cab" "ca"], "cn"$|"date2", "full");
df_cab = sortmc(df_cab, "cn"$|"Date");

print "*********** First Merge isunique **************";
isunique(df_cab, "cn"$|"Date");

// Merge with Eurostat data
df_cab = outerjoin(df_cab, "cn"$|"Date", eurostat_raw[., "cn" "Date" "pct_ca_eurostat"], "cn"$|"Date", "full");
df_cab = sortmc(df_cab, "cn"$|"Date");

print "*********** Second Merge isunique **************";
isunique(df_cab, "cn"$|"Date");

// Merge with computed data
df_cab = outerjoin(df_cab, "cn"$|"Date", cab_computed_sa[., "cn" "Date" "computed_pct_cab_sa"], "cn"$|"Date", "full");
df_cab = sortmc(df_cab, "cn"$|"Date");

print "*********** Third Merge isunique **************";
isunique(df_cab, "cn"$|"Date");

// Filter dates before 1960
df_cab = delif(df_cab, df_cab[., "Date"].<"1960-01-01");


/*
** Add country labels and ccode
*/

// Merge with cn list
df_cab = outerJoin(df_cab, "cn", cn_list, "cn");
df_cab = order(df_cab, "cn"$|"ccode"$|"country_name"$|"Date");

// Drop unused categories
df_cab = dropUnusedCategories(df_cab, "ccode");
df_cab = dropUnusedCategories(df_cab, "country_name");

/********* TimeSpans ***********/
data_timespans = pdTimeSpans(df_cab, "pct_ca_oecd"$|"pct_ca_eurostat"$|"computed_pct_cab_sa"$|"pct_ca"$|"ca"$|"pct_ca_sa_2"$|"cab", "ccode"); 

/*
** Fill in data
** First preferences is new OECD data
** Second is ca 
** Third is 
*/
// Create source variable to track source
df_cab = df_cab~asDF(reshape(0, rows(df_cab), 1), "source");

// Step One: Fill in with available OECD data
df_cab[., "cab"] = where(df_cab[., "pct_ca_oecd"] .!= miss(), df_cab[., "pct_ca_oecd"], df_cab[., "cab"]); 
df_cab[., "source"] = where(df_cab[., "pct_ca_oecd"] .!= miss(), 1, df_cab[., "source"]);

// Step Two: Fill in with available Eurostat data
tmp_used = df_cab[., "pct_ca_oecd"] .== miss();
tmp = (tmp_used .and df_cab[., "pct_ca_eurostat"].!=miss());
df_cab[., "cab"] = where(tmp, df_cab[., "pct_ca_eurostat"], df_cab[., "cab"]); 
df_cab[., "source"] = where(tmp, 2, df_cab[., "source"]);

// Step Three: Fill in with available computed CAB (IMF&OECD combination)
tmp_used = tmp_used .and df_cab[., "pct_ca_eurostat"].==miss();
tmp = (tmp_used .and df_cab[., "computed_pct_cab_sa"].!=miss());
df_cab[., "cab"] = where(tmp, df_cab[., "computed_pct_cab_sa"], df_cab[., "cab"]); 
df_cab[., "source"] = where(tmp, 3, df_cab[., "source"]);

// Next fill with pct_ca_sa_2 if OECD and Eurostat data is missing
tmp_used = tmp_used .and df_cab[., "computed_pct_cab_sa"].==miss();
tmp = (tmp_used .and df_cab[., "pct_ca_sa_2"].!=miss());
df_cab[., "cab"] = where(tmp, df_cab[., "pct_ca_sa_2"], df_cab[., "cab"]); 
df_cab[., "source"] = where(tmp, 4, df_cab[., "source"]);

// Finally check for ca if those aren't available
tmp_used = tmp_used .and df_cab[., "pct_ca_sa_2"].==miss();
tmp = (tmp_used .and df_cab[., "ca"].!=miss());
df_cab[., "cab"] = where(tmp, df_cab[., "ca"], df_cab[., "cab"]); 
df_cab[., "source"] = where(tmp, 5, df_cab[., "source"]);

// Delete observations that have no data
df_cab = delif(df_cab, df_cab[., "source"] .== 0);

// Summary statistics
var_list = "cn"$|"ccode"$|"country_name"$|"cab";
dstatmt(df_cab, var_list);

/*
** Final selection of data
*/
reg_cab_data = df_cab[., "ccode" "cn" "country_name" "Date" "cab" "source"];
reg_cab_data = dfname(move(reg_cab_data), "pct_cab", "cab");
reg_cab_data = dftype(move(reg_cab_data), META_TYPE_CATEGORY, "ccode");

// Drop unused categories
reg_cab_data = dropUnusedCategories(reg_cab_data, "ccode");
reg_cab_data = dropUnusedCategories(reg_cab_data, "country_name");

/*
** Check frequencies
*/

frequency(reg_cab_data, "ccode");
frequency(reg_cab_data, "country_name", 1);

/*
** Add country groups
*/
groups = loadd(data_dir$+"/group_dummies.csv");

// Merge with groups
reg_cab_data = outerJoin(reg_cab_data, "cn", groups, "cn");
reg_cab_data[., "country_name"] = strreplace(reg_cab_data[., "country_name"], ",", " ");
dstatmt(reg_cab_data);
end; 

saved(reg_cab_data, save_dir_data$+"/reg_cab_data.csv");

// Check timespans
saved(pdTimeSpans(reg_cab_data[ ., "country_name" "Date" "pct_cab"]), save_dir $+ "/cab-timespans.csv");

// Get summary stats
